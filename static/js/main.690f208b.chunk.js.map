{"version":3,"sources":["images/bg-intro-desktop.png","images/bg-intro-mobile.png","images/icon-error.svg","components/Typography/Typography.js","components/Styled/Form.js","components/Styled/Terms.js","components/Desc/Desc.js","components/Button/Button.js","components/Styled/Input.js","components/FormField/FormField.js","store/index.js","reducer/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","P","styled","p","Heading","h1","StyleP","ErrorP","Form","form","Terms","Desc","div","Button","button","Input","input","StyledField","error","css","errorIcn","FormField","placeholder","name","errorText","onChange","value","type","aria-label","globalStateContext","React","createContext","Provider","Consumer","initialState","firstName","lastName","email","password","clicked","reducer","state","payload","Global","createGlobalStyle","MobileBG","DesktopBG","App","useReducer","dispatch","e","target","emailIsValid","test","Fragment","className","onSubmit","preventDefault","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.690f208b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg-intro-desktop.eb8c9c16.png\";","module.exports = __webpack_public_path__ + \"static/media/bg-intro-mobile.3e78c71a.png\";","module.exports = __webpack_public_path__ + \"static/media/icon-error.eb2c6ce2.svg\";","import styled from 'styled-components';\r\n\r\nexport const P = styled.p``;\r\nexport const Heading = styled.h1`\r\n    font-size: 1.5rem;\r\n    @media (min-width: 600px) {\r\n        font-size: 2.5rem;\r\n    }\r\n`;\r\nexport const StyleP = styled(P)`\r\n    background: var(--blue);\r\n    text-align: center;\r\n    padding: 1em;\r\n    border-radius: 5px;\r\n    box-shadow: 0px 5px 0px rgba(0, 0, 0, .1);\r\n`;\r\nexport const ErrorP = styled(P)`\r\n    font-size: .8rem;\r\n    text-align: right;\r\n    color: var(--red);\r\n    position: relative;\r\n    bottom: 10px;\r\n`;","import styled from 'styled-components';\r\n\r\nconst Form = styled.form`\r\n    border: 1px solid var(--grayishblue);\r\n    border-radius: 5px;\r\n    padding: 2em;\r\n    background: white;\r\n    text-align: center;\r\n    color: var(--grayishblue);\r\n`;\r\n\r\nexport default Form;","import styled from 'styled-components';\r\n\r\nconst Terms = styled.p`\r\n    color: var(--grayishblue);\r\n    font-size: .8rem;\r\n    width: 90%;\r\n    margin: 0 auto;\r\n\r\n    a {\r\n        color: var(--red);\r\n        font-weight: bold;\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nexport default Terms;","import styled from 'styled-components';\r\n\r\nconst Desc = styled.div`\r\n    text-align: center;\r\n    margin-bottom: 4em;\r\n    \r\n    @media (min-width: 600px) {\r\n        text-align: left;\r\n        align-self: center;\r\n        margin-right: 20px;\r\n    }\r\n`;\r\n\r\nexport default Desc;","import styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n    text-align: center;\r\n    padding: 1em;\r\n    box-shadow: 0px 5px 0px var(--greenborder);\r\n    background: var(--green);\r\n    text-transform: uppercase;\r\n    border: none;\r\n    width: 100%;\r\n    border-radius: 5px;\r\n    color: white;\r\n    font-weight: bold;\r\n    margin-bottom: 1em;\r\n    font-size: 1.03rem;\r\n    outline: none;\r\n    transition: 0.5s;\r\n\r\n    &:hover, &:active {\r\n        opacity: .5;\r\n    }\r\n`;\r\n\r\nexport default Button;","import styled from 'styled-components';\r\n\r\nconst Input = styled.input`\r\n    border: 1px solid var(--grayishblue);\r\n    border-radius: 5px;\r\n    padding: 1em;\r\n    display: block;\r\n    outline: none;\r\n    width: 100%;\r\n    margin-bottom: 1em;\r\n    font-size: 1.1rem;\r\n\r\n    &:focus {\r\n        border: 1px solid black;\r\n    }\r\n\r\n`;\r\n\r\nexport default Input;","import React from 'react';\r\nimport Input from '../Styled/Input';\r\nimport {ErrorP} from '../Typography/Typography';\r\nimport errorIcn from '../../images/icon-error.svg';\r\nimport styled, {css} from 'styled-components';\r\n\r\nconst StyledField = styled.div`\r\n    position: relative;\r\n    ${({error}) => error && css`\r\n    &:after {\r\n        background: url(${errorIcn});\r\n        content: '';\r\n        width: 24px;\r\n        height: 24px;\r\n        position: absolute;\r\n        top: 15px;\r\n        right: 15px;\r\n        transition: .5s;\r\n    }`}\r\n`;\r\n\r\n\r\n\r\nexport default function FormField({\r\n    placeholder, name,\r\n    error, errorText,\r\n    onChange, value, type,\r\n}) {\r\n    return (\r\n        <StyledField error={error}>\r\n            <Input\r\n                type={type}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n                name={name}\r\n                aria-label={name}\r\n            />\r\n            {error && <ErrorP>{errorText || 'Invalid input'}</ErrorP>}\r\n        </StyledField>\r\n    )\r\n}","import React from 'react';\r\n\r\nconst globalStateContext = React.createContext({});\r\n\r\nexport const Provider = globalStateContext.Provider;\r\nexport const Consumer = globalStateContext.Consumer;\r\nexport default globalStateContext;","export const initialState = {\r\n  firstName: '',\r\n  lastName: '',\r\n  email: '',\r\n  password: '',\r\n  clicked: false\r\n}\r\n\r\nexport default function reducer(state = initialState, { type, payload }) {\r\n  switch (type) {\r\n    case 'changeVal':\r\n      const { name, value } = payload;\r\n      return {\r\n        ...state,\r\n        [name]: value\r\n      }\r\n    case 'reset':\r\n      return {\r\n        ...initialState\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}","import React, { useReducer } from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport DesktopBG from './images/bg-intro-desktop.png';\nimport MobileBG from './images/bg-intro-mobile.png';\nimport {\n  P, Heading, StyleP\n} from './components/Typography/Typography';\nimport Form from './components/Styled/Form';\nimport Terms from './components/Styled/Terms';\nimport Desc from './components/Desc/Desc';\nimport Button from './components/Button/Button';\nimport FormField from './components/FormField/FormField';\nimport { Provider } from './store';\nimport reducer, { initialState } from './reducer';\n\n\nconst Global = createGlobalStyle`\n*, *:before, *:after {\n  box-sizing: border-box;\n}\n:root {\n  --red: hsl(0, 100%, 74%);\n  --green: hsl(154, 59%, 51%);\n  --greenborder: hsl(154, 59%, 40%);\n  --blue: hsl(248, 32%, 49%);\n  --darkblue: hsl(249, 10%, 26%);\n  --grayishblue: hsl(246, 25%, 77%);\n}\nbody {\n  background: var(--red) url(${MobileBG});\n  font-family: 'Poppins', sans-serif;\n  color: white;\n\n  @media (min-width: 600px) {\n    background: var(--red) url(${DesktopBG});\n  }\n}\n.app {\n  width: min(1200px, 100%);\n  padding: 5em 2.5em;\n  margin: 0 auto;\n\n  @media (min-width: 600px) {\n    display: flex;\n  }\n\n  div {\n    flex: 50% 1 1;\n  }\n}\n`;\n\nfunction App() {\n  const [{\n    firstName, lastName, email, password, clicked\n  }, dispatch] = useReducer(reducer, initialState);\n  const emailRegex = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n  const onChange = name => e => dispatch({ type: 'changeVal', payload: { name, value: e.target.value } });\n  const emailIsValid = emailRegex.test(email);\n  function onSubmit(e) {\n    e.preventDefault();\n    dispatch({type: 'changeVal', payload: {\n      name: 'clicked',\n      value: true\n    }})\n\n    if(firstName && lastName && email && password && emailIsValid) {\n      dispatch({type: 'reset'});\n    }\n  }\n  \n  return (\n    <React.Fragment>\n      <Global />\n      <main className=\"app\">\n        <Desc>\n          <Heading>Learn to code by watching others</Heading>\n          <P>See how experienced developers solve problems in real-time. Watching scripted tutorials is great, but understanding how developers think is invaluable.</P>\n        </Desc>\n        <div>\n          <StyleP>\n            <strong>Try it free 7 days</strong> then $20/mo. thereafter\n          </StyleP>\n          <Form onSubmit={onSubmit}>\n            <FormField\n              value={firstName}\n              error={clicked && !firstName}\n              name=\"firstName\"\n              errorText=\"First Name cannot be empty\"\n              placeholder=\"First Name\" onChange={onChange('firstName')} />\n            <FormField\n              value={lastName}\n              error={clicked && !lastName}\n              name=\"lastName\"\n              errorText=\"Last Name cannot be empty\"\n              placeholder=\"Last Name\" onChange={onChange('lastName')} />\n            <FormField\n              value={email}\n              error={clicked && (!email || !emailIsValid)}\n              name=\"email\"\n              errorText={email && !emailIsValid ? 'Looks like this is not an email' : \"Email cannot be empty\"}\n              placeholder=\"Email Address\" onChange={onChange('email')} />\n            <FormField\n              value={password}\n              error={clicked && !password}\n              name=\"password\"\n              errorText=\"Password cannot be empty\"\n              placeholder=\"Password\" type=\"password\" onChange={onChange('password')} />\n            <Button>Claim your free trial</Button>\n            <Terms>By clicking the button, you are agreeing to our <a href=\"#\">Terms and Services</a></Terms>\n          </Form>\n        </div>\n      </main>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}